package com.xmy.secondskill.rabbitmq;import com.xmy.secondskill.entity.MiaoshaOrder;import com.xmy.secondskill.entity.User;import com.xmy.secondskill.redis.RedisService;import com.xmy.secondskill.service.GoodsService;import com.xmy.secondskill.service.MiaoShaService;import com.xmy.secondskill.service.OrderService;import com.xmy.secondskill.vo.GoodsVo;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.amqp.rabbit.annotation.RabbitListener;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;/** * @author xmy * @date 2021/3/29 11:38 下午 */@Servicepublic class MQReceiver {    private static Logger log = LoggerFactory.getLogger(MQReceiver.class);    @Autowired    GoodsService goodsService;    @Autowired    OrderService orderService;    @Autowired    MiaoShaService miaoShaService;    @RabbitListener(queues = MQConfig.MIAOSHA_QUEUE)    public void receiver(String message) {        log.info("receive message:" +message);        //处理队列中秒杀的信息        //减少库存，下订单，写入秒杀订单        MiaoShaMessage mm = RedisService.stringToBean(message,MiaoShaMessage.class);        User user = mm.getUser();        long goodsId = mm.getGoodsId();        GoodsVo goods = goodsService.getGoodsVoByGoodsId(goodsId);        int stock = goods.getStockCount();        if (stock <= 0) {            return;        }        //判断是否秒杀到了        MiaoshaOrder order = orderService.getMiaoShaOrderByUserIdAndGoodsId(user.getId(),goodsId);        if (order != null) {            return;        }        //减库存，下订单，写入秒杀订单        miaoShaService.miaosha(user,goods);    }//    @RabbitListener(queues = MQConfig.QUEUE)//    public void receive(String message) {//        log.info("receive message:" + message);//    }////    @RabbitListener(queues = MQConfig.TOPIC_QUEUE1)//    public void receiveTopic1(String message) {//        log.info("topic queue1 message:" + message);//    }////    @RabbitListener(queues = MQConfig.TOPIC_QUEUE2)//    public void receiveTopic2(String message) {//        log.info("topic queue2 message:" + message);//    }////    @RabbitListener(queues = MQConfig.HEADER_QUEUE)//    public void receiveHeaderQueue(byte[] message) {//        log.info(" header  queue message:"+new String(message));//    }}