package com.xmy.secondskill.config;import com.xmy.secondskill.entity.User;import com.xmy.secondskill.service.UserService;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.core.MethodParameter;import org.springframework.stereotype.Service;import org.springframework.web.bind.support.WebDataBinderFactory;import org.springframework.web.context.request.NativeWebRequest;import org.springframework.web.method.support.HandlerMethodArgumentResolver;import org.springframework.web.method.support.ModelAndViewContainer;import javax.servlet.http.Cookie;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;/** * @author xmy * @date 2021/3/27 12:28 下午 */@Servicepublic class UserArgumentResolver implements HandlerMethodArgumentResolver {    @Autowired    UserService userService;    @Override    public boolean supportsParameter(MethodParameter methodParameter) {        Class<?> clazz = methodParameter.getParameterType();        //遇到Uer类型的才进行下面的处理        return clazz == User.class;    }    @Override    public Object resolveArgument(MethodParameter methodParameter, ModelAndViewContainer modelAndViewContainer, NativeWebRequest nativeWebRequest, WebDataBinderFactory webDataBinderFactory) throws Exception {        HttpServletRequest request = nativeWebRequest.getNativeRequest(HttpServletRequest.class);        HttpServletResponse response = nativeWebRequest.getNativeResponse(HttpServletResponse.class);        String paramToken = request.getParameter(UserService.COOKIE_NAME_TOKEN);        String cookieToken = getCookieValue(request,UserService.COOKIE_NAME_TOKEN);        if (StringUtils.isEmpty(cookieToken) && StringUtils.isEmpty(paramToken)) {            return null;        }        String token = StringUtils.isEmpty(paramToken)?cookieToken:paramToken;        return userService.getByToken(response,token);    }    private String getCookieValue(HttpServletRequest request,String cookieName) {        Cookie[] cookies = request.getCookies();        for (Cookie cookie : cookies) {            if (cookie.getName().equals(cookieName)) {                return cookie.getValue();            }        }        return null;    }}