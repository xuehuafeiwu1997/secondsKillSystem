package com.xmy.secondskill.service;import com.xmy.secondskill.entity.MiaoshaOrder;import com.xmy.secondskill.entity.OrderInfo;import com.xmy.secondskill.entity.User;import com.xmy.secondskill.redis.MiaoshaKey;import com.xmy.secondskill.redis.RedisService;import com.xmy.secondskill.util.MD5Util;import com.xmy.secondskill.util.UUIDUtil;import com.xmy.secondskill.vo.GoodsVo;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import javax.script.ScriptEngine;import javax.script.ScriptEngineManager;import java.awt.*;import java.awt.image.BufferedImage;import java.util.List;import java.util.Random;/** * @author xmy * @date 2021/3/28 1:20 下午 */@Servicepublic class MiaoShaService {    @Autowired    GoodsService goodsService;    @Autowired    OrderService orderService;    @Autowired    RedisService redisService;    public OrderInfo miaosha(User user, GoodsVo goods) {        //减库存，下订单，写入秒杀订单        boolean success = goodsService.reduceGoods(goods);        if (success) {            //创建订单            return orderService.createOrder(user,goods);        } else {            setGoodsOver(goods.getId());            return null;        }    }    public long getMiaoShaResult(Long userId, long goodsId) {        MiaoshaOrder order = orderService.getMiaoShaOrderByUserIdAndGoodsId(userId,goodsId);        if (order != null) {            return order.getOrderId();        } else {            boolean isOver = getGoodsOver(goodsId);            if (isOver) {                return -1;            } else {                return 0;            }        }    }    private boolean getGoodsOver(long goodsId) {        return redisService.exists(MiaoshaKey.isGoodsOver,""+goodsId);    }    private void setGoodsOver(long goodsId) {        redisService.set(MiaoshaKey.isGoodsOver,""+goodsId,true);    }    public void reset(List<GoodsVo> goodsList) {        goodsService.resetStock(goodsList);        orderService.deleteOrders();    }    public boolean checkPath(User user, Long goodsId, String path) {        if (user == null || path == null) {            return false;        }        String pathOld = redisService.get(MiaoshaKey.getMiaoshaPath,""+user.getId()+"_"+goodsId,String.class);        return path.equals(pathOld);    }    public String createMiaoshaPath(User user,long goodsId) {        if (user == null || goodsId < 0) {            return null;        }        String str = MD5Util.md5(UUIDUtil.uuid()+"123456");        redisService.set(MiaoshaKey.getMiaoshaPath, ""+user.getId() + "_"+ goodsId,str);        return str;    }    public BufferedImage createVerifyCode(User user, long goodsId) {        if(user == null || goodsId <=0) {            return null;        }        int width = 80;        int height = 32;        //create the image        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);        Graphics g = image.getGraphics();        // set the background color        g.setColor(new Color(0xDCDCDC));        g.fillRect(0, 0, width, height);        // draw the border        g.setColor(Color.black);        g.drawRect(0, 0, width - 1, height - 1);        // create a random instance to generate the codes        Random rdm = new Random();        // make some confusion        for (int i = 0; i < 50; i++) {            int x = rdm.nextInt(width);            int y = rdm.nextInt(height);            g.drawOval(x, y, 0, 0);        }        // generate a random code        String verifyCode = generateVerifyCode(rdm);        g.setColor(new Color(0, 100, 0));        g.setFont(new Font("Candara", Font.BOLD, 24));        g.drawString(verifyCode, 8, 24);        g.dispose();        //把验证码存到redis中        int rnd = calc(verifyCode);        redisService.set(MiaoshaKey.getMiaoshaVerifyCode, user.getId()+","+goodsId, rnd);        //输出图片	        return image;    }    private static int calc(String exp) {        try {            ScriptEngineManager manager = new ScriptEngineManager();            ScriptEngine engine = manager.getEngineByName("JavaScript");            return (Integer)engine.eval(exp);        }catch(Exception e) {            e.printStackTrace();            return 0;        }    }    private static char[] ops = new char[] {'+', '-', '*'};    private String generateVerifyCode(Random rdm) {        int num1 = rdm.nextInt(10);        int num2 = rdm.nextInt(10);        int num3 = rdm.nextInt(10);        char op1 = ops[rdm.nextInt(3)];        char op2 = ops[rdm.nextInt(3)];        String exp = ""+ num1 + op1 + num2 + op2 + num3;        return exp;    }    public boolean checkVerifyCode(User user, long goodsId, int verifyCode) {        if (user == null || goodsId < 0) {            return false;        }        Integer codeOld = redisService.get(MiaoshaKey.getMiaoshaVerifyCode,user.getId()+"," + goodsId,Integer.class);        if (codeOld == null || codeOld -verifyCode != 0) {            return false;        }        redisService.delete(MiaoshaKey.getMiaoshaVerifyCode, user.getId()+","+goodsId);        return true;    }}