package com.xmy.secondskill.access;import com.alibaba.fastjson.JSON;import com.sun.tools.javac.jvm.Code;import com.xmy.secondskill.entity.User;import com.xmy.secondskill.redis.AccessKey;import com.xmy.secondskill.redis.RedisService;import com.xmy.secondskill.result.CodeMsg;import com.xmy.secondskill.result.Result;import com.xmy.secondskill.service.UserService;import org.apache.commons.lang3.StringUtils;import org.springframework.amqp.rabbit.listener.adapter.HandlerAdapter;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.web.method.HandlerMethod;import org.springframework.web.servlet.ModelAndView;import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;import javax.servlet.http.Cookie;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.OutputStream;import java.nio.charset.StandardCharsets;/** * @author xmy * @date 2021/3/31 9:17 下午 */@Servicepublic class AccessInterceptor extends HandlerInterceptorAdapter {    @Autowired    UserService userService;    @Autowired    RedisService redisService;    @Override    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {        if (handler instanceof HandlerMethod) {            HandlerMethod hm = (HandlerMethod)handler;            User user = getUser(request,response);            UserContext.setUser(user);            AccessLimit accessLimit = hm.getMethodAnnotation(AccessLimit.class);            if (accessLimit == null) {                return true;            }            int seconds = accessLimit.seconds();            int maxCount = accessLimit.maxCount();            boolean needLogin = accessLimit.needLogin();            String key = request.getRequestURI();            if (needLogin) {                if (user == null) {                    render(response, CodeMsg.SERVER_ERROR);                    return false;//返回false表示不进入这个页面                }                key += "_" + user.getId();            } else {                //donothing            }            AccessKey ak = AccessKey.withExpire(seconds);            Integer count = redisService.get(ak,key,Integer.class);            if (count == null) {                redisService.set(ak,key,1);            } else if(count < maxCount) {                redisService.incr(ak,key);            } else {                render(response, CodeMsg.ACCESS_LIMIT_REACHED);                return false;            }            return true;        }        return super.preHandle(request, response, handler);    }    private void render(HttpServletResponse response, CodeMsg serverError) throws Exception{        response.setContentType("application/json;charset=UTF-8");        OutputStream out = response.getOutputStream();        String str = JSON.toJSONString(Result.error(serverError));        out.write(str.getBytes(StandardCharsets.UTF_8));        out.flush();        out.close();    }    @Override    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {        super.postHandle(request, response, handler, modelAndView);    }    @Override    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {        super.afterCompletion(request, response, handler, ex);    }    @Override    public void afterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {        super.afterConcurrentHandlingStarted(request, response, handler);    }    private User getUser(HttpServletRequest request, HttpServletResponse response) {        String paramToken = request.getParameter(UserService.COOKIE_NAME_TOKEN);        String cookieToken = getCookieValue(request,UserService.COOKIE_NAME_TOKEN);        if (StringUtils.isEmpty(cookieToken) && StringUtils.isEmpty(paramToken)) {            return null;        }        String token = StringUtils.isEmpty(paramToken)?cookieToken:paramToken;        return userService.getByToken(response,token);    }    private String getCookieValue(HttpServletRequest request,String cookieName) {        Cookie[] cookies = request.getCookies();        //这里要加判断，可能出现空指针异常        if (cookies == null || cookies.length <= 0) {            return null;        }        for (Cookie cookie : cookies) {            if (cookie.getName().equals(cookieName)) {                return cookie.getValue();            }        }        return null;    }}